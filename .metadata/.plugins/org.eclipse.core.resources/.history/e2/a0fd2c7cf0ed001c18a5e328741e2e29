package com.cg.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.util.List;
import java.util.HashMap;

import org.bson.json.JsonParseException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.cg.exception.SongNotFoundException;
import com.cg.model.Song;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
class InventoryControllerTest {

	private static final int HashMap = 0;

	private MockMvc mvc;

	@Autowired
	private WebApplicationContext webApplicationContext;
	private Song song;

	@BeforeEach
	public void setup() {
		mvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
		song = new Song(142, "title", List.of("singer 1", "singer 2"), "category", "album", 2000);
	}

	@Test
	public void findAllSongTest() throws Exception {
		String uri = "/inventory/findAll";
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri).accept(MediaType.APPLICATION_JSON_VALUE))
				.andReturn();
		MockHttpServletResponse response = mvcResult.getResponse();

		int status = response.getStatus();
		Song[] result = jsonStringToObject(response.getContentAsString(), Song[].class);
		assertEquals(200, status);
		assertTrue(result.length >= 0);
	}

	@Test
	public void findSongTest() throws Exception {
		String uri = "/inventory/find/" + song.getId();

		// adding sample
		addSampleData();
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri).accept(MediaType.APPLICATION_JSON_VALUE))
				.andReturn();
		MockHttpServletResponse response = mvcResult.getResponse();

		int status = response.getStatus();
		Song result = jsonStringToObject(response.getContentAsString(), Song.class);

		assertEquals(200, status);
		assertEquals(song, result);

		// clean up
		deleteSampleData();
	}

	@Test
	public void addSong() throws Exception {
		String uri = "/inventory/add";

		String jsonString = objectToJsonString(song);
		MvcResult mvcResult = mvc.perform(
				MockMvcRequestBuilders.post(uri).contentType(MediaType.APPLICATION_JSON_VALUE).content(jsonString))
				.andReturn();

		MockHttpServletResponse response = mvcResult.getResponse();
		int status = response.getStatus();
		Song result = jsonStringToObject(response.getContentAsString(), Song.class);
		assertEquals(200, status);
		assertEquals(song, result);

		// clean up
		deleteSampleData();
	}

	@Test
	public void deleteSong() throws Exception {
		String uri = "/inventory/delete/" + song.getId();

		// add sample data before testing
		addSampleData();

		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.delete(uri)).andReturn();
		int status = mvcResult.getResponse().getStatus();
		assertEquals(200, status);
	}

	@Test
	public void updateSong() throws Exception {
		String uri = "/inventory/update/" + song.getId();

		// add sample data before testing
		addSampleData();

		song.setYear(46000);

		String jsonString = objectToJsonString(song);
		MvcResult mvcResult = mvc.perform(
				MockMvcRequestBuilders.put(uri).contentType(MediaType.APPLICATION_JSON_VALUE).content(jsonString))
				.andReturn();

		MockHttpServletResponse response = mvcResult.getResponse();
		Song result = jsonStringToObject(response.getContentAsString(), Song.class);
		int status = response.getStatus();

		assertEquals(200, status);
		assertEquals(song, result);

		// remove sample data after testing
		deleteSampleData();
	}
	
	
	
	@Test
	public void findSongIfNotExistTest() throws Exception {
		String uri = "/inventory/find/1938";

		// adding sample
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri).accept(MediaType.APPLICATION_JSON_VALUE))
				.andReturn();
		MockHttpServletResponse response = mvcResult.getResponse();
		
		HashMap<String,String> result=jsonStringToObject(response.getContentAsString(), HashMap.class);
		int status = response.getStatus();

		HashMap<String,String> expected = new HashMap<>();
		expected.put("message", "song not exist");
		
		assertEquals(500,response.getStatus());
		assertEquals(expected,result);

	}
	
	

	// Utility functions
	public void addSampleData() throws Exception {
		String uri = "/inventory/add";
		String jsonString = objectToJsonString(song);
		mvc.perform(MockMvcRequestBuilders.post(uri).contentType(MediaType.APPLICATION_JSON_VALUE).content(jsonString))
				.andReturn();
	}

	public void deleteSampleData() throws Exception {
		String uri = "/inventory/delete/" + song.getId();
		mvc.perform(MockMvcRequestBuilders.delete(uri)).andReturn();
	}

	private String objectToJsonString(Object obj) throws JsonProcessingException {
		ObjectMapper objectMapper = new ObjectMapper();
		return objectMapper.writeValueAsString(obj);
	}

	private <T> T jsonStringToObject(String json, Class<T> clazz)
			throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper objectMapper = new ObjectMapper();
		return objectMapper.readValue(json, clazz);
	}
	
	
	

}
